module.exports = getDocumentLayout;

/**
 * Translate page layouts, as generated by page-layouts, into
 * a layout for the document as a whole
 */
function getDocumentLayout(config)
{
    var scaledLayouts = config.zoomLevel === null ? config.pageLayouts : getScaledPageLayouts(config);

    var documentSecondaryExtent = getExtentAlongSecondaryAxis(config, scaledLayouts);

    // The current position in the document along the primary axis
    var primaryDocPosition = config.verticallyOriented ?
        config.padding.document.top :
        config.padding.document.left;

    var pageGroups = [];

    // TODO: Use bottom, right as well
    var pagePadding = {
        top: config.padding.page.top,
        left: config.padding.page.left
    };

    scaledLayouts.forEach(function (layout, index)
    {
        var top, left;

        if (config.verticallyOriented)
        {
            top = primaryDocPosition;
            left = (documentSecondaryExtent - layout.dimensions.width) / 2;
        }
        else
        {
            top = (documentSecondaryExtent - layout.dimensions.height) / 2;
            left = primaryDocPosition;
        }

        var region = {
            top: top,
            bottom: top + pagePadding.top + layout.dimensions.height,
            left: left,
            right: left + pagePadding.left + layout.dimensions.width
        };

        pageGroups.push({
            index: index,
            dimensions: layout.dimensions,
            pages: layout.pages,
            region: region,
            padding: pagePadding
        });

        primaryDocPosition = config.verticallyOriented ? region.bottom : region.right;
    });

    var height, width;

    if (config.verticallyOriented)
    {
        height = primaryDocPosition + pagePadding.top;
        width = documentSecondaryExtent;
    }
    else
    {
        height = documentSecondaryExtent;
        width = primaryDocPosition + pagePadding.left;
    }

    return {
        dimensions: {
            height: height,
            width: width
        },
        pageGroups: pageGroups
    };
}

function getScaledPageLayouts(config)
{
    var scaleRatio = Math.pow(2, config.zoomLevel - config.maxZoomLevel);

    return config.pageLayouts.map(function (group)
    {
        return {
            dimensions: scaleDimensions(group.dimensions, scaleRatio),
            pages: group.pages.map(function (page)
            {
                return {
                    index: page.index,
                    groupOffset: {
                        top: Math.floor(page.groupOffset.top * scaleRatio),
                        left: Math.floor(page.groupOffset.left * scaleRatio)
                    },
                    dimensions: scaleDimensions(page.dimensions, scaleRatio)
                };
            })
        };
    });
}

function scaleDimensions(dimensions, scaleRatio)
{
    return {
        height: Math.floor(dimensions.height * scaleRatio),
        width: Math.floor(dimensions.width * scaleRatio)
    };
}

function getExtentAlongSecondaryAxis(config, scaledLayouts)
{
    // Get the extent of the document along the secondary axis
    var secondaryDim, secondaryPadding;
    var docPadding = config.padding.document;

    if (config.verticallyOriented)
    {
        secondaryDim = 'width';
        secondaryPadding = docPadding.left + docPadding.right;
    }
    else
    {
        secondaryDim = 'height';
        secondaryPadding = docPadding.top + docPadding.bottom;
    }

    return secondaryPadding + scaledLayouts.reduce(function (maxDim, layout)
    {
        return Math.max(layout.dimensions[secondaryDim], maxDim);
    }, 0);
}
